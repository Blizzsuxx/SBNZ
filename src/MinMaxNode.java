/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package root;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;


public class MinMaxNode {
	private ArrayList<Integer> values;
	private Move move;
	private Set<MinMaxNode> children = new HashSet<>();
	private Player player;
	public ArrayList<Integer> getValues() {
		return values;
	}
	public Move getMove() {
		return move;
	}
	public Set<MinMaxNode> getChildren() {
		return children;
	}
	public Player getPlayer() {
		return player;
	}
	public MinMaxNode setValues(ArrayList<Integer> values) {
		this.values = values;
		return this;
	}
	public MinMaxNode setMove(Move move) {
		this.move = move;
		return this;
	}
	public MinMaxNode setPlayer(Player player) {
		this.player = player;
		return this;
	}
	public MinMaxNode linkMove(Move _move) {
		setMove(_move);
		return this;
	}
	public MinMaxNode linkChildren(MinMaxNode _children) {
		if (_children != null) {
			getChildren().add(_children);
		}
		return this;
	}
	public MinMaxNode linkPlayer(Player _player) {
		setPlayer(_player);
		return this;
	}
	public MinMaxNode unlinkMove() {
		setMove(null);
		return this;
	}
	public MinMaxNode unlinkChildren(MinMaxNode _children) {
		if (_children != null) {
			getChildren().remove(_children);
		}
		return this;
	}
	public MinMaxNode unlinkChildren(Iterator<MinMaxNode> it) {
		it.remove();
		return this;
	}
	public MinMaxNode unlinkPlayer() {
		setPlayer(null);
		return this;
	}
}