package com.sample
 
import model.*
import java.util.List;
import java.util.ArrayList;
import java.lang.Math;
global Game game;
 
rule "Is BoardObject In Center"
	no-loop true
    when
        $boardObject : BoardObject( x == 4, y == 4)
    then
        System.out.println( $boardObject.getClass().getName() + " is in center" );
        System.out.println($boardObject);
        $boardObject.setCenter(true);
		update($boardObject);
		System.out.println($boardObject);      
end

rule "A Piece just got into center"
    when
        $piece : Chief( center == true)
    then
    
        System.out.println( "Chief is in center, rearrange player order" ); 
end


rule "Piece"
	
	when
		$chief : Piece(isDead()==false, player == game.getCurrentPlayer(), $x : x, $y : y)
	then
		
		MinMaxNode $newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x, $y+1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x+1, $y);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x-1, $y);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x, $y-1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x-1, $y-1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x+1, $y-1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x+1, $y+1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x-1, $y+1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		
		insert($newMove);
end


rule "MinMaxNode prunning"
	salience 5
	when 
		$newMove: MinMaxNode(move.getTileTo() == null || (move.getTileTo().getPiece() != null 
		&& move.getTileTo().getPiece().getPlayer() != move.getPiece().getPlayer()))
	then 
		delete($newMove);
		game.getRoot().getChildren().remove($newMove);
end


rule "MinMax Expanding"
	salience 4
	when 
		$newMove: MinMaxNode($x : move.piece.x, $y : move.piece.y, $x2 : move.tileTo.x, $y2 : move.tileTo.y)
	then 
		MinMaxNode $newMove2 = new MinMaxNode();
		$newMove2.setMove(new Move());
		$newMove2.getMove().setTileFrom($x, $y);
		
		int $x3 = $x2 - $x;
		if($x3 != 0){
			$x3 = $x3 / Math.abs($x3);
		}
		
		int $y3 = $y2 - $y;
		if($y3 != 0){
			$y3 = $y3 / Math.abs($y3);
		}
		
		if($newMove.getMove().getPiece().getClass() == Millitant.class){
			if($newMove.getMove().getPiece().getX() + 2 < $x2+$x3){
				return;
			} else if($newMove.getMove().getPiece().getX() - 2 > $x2+$x3){
				return;
			} else if($newMove.getMove().getPiece().getY() + 2 < $y2+$y3){
				return;
			} else if($newMove.getMove().getPiece().getY() - 2 > $y2+$y3){
				return;
			}
		}
		
		
		$newMove2.getMove().setTileTo($x2 + $x3, $y2 + $y3);
		$newMove2.getMove().setPiece($newMove.getMove().getPiece());
		$newMove2.setPlayer($newMove.getMove().getPiece().getPlayer());
		$newMove2.setParent(game.getRoot());
		game.getRoot().addChild($newMove2);
		insert($newMove2);
end

rule "Heuristics"
	salience 3
	when
		$newMove : MinMaxNode()
		$numberOfSurvivors : Number() from accumulate(
			Player($alive : isAlive()),
			init(int survivors = 0;),
			action(if($alive) survivors++;),
			reverse(if($alive) survivors--;),
			result(survivors)
		)
		$nodeValues : ArrayList() from accumulate(
			$player : Player($alive : isAlive()),
			
			init(
			
			ArrayList<Integer> values = new ArrayList<Integer>();
			values.add(0);
			values.add(0);
			values.add(0);
			values.add(0);
			),
			
			action(if($alive) values.set($player.getIndex(), 48/$numberOfSurvivors+1);),
			reverse(if($alive) values.set($player.getIndex(), 0);),
			result(values;)
		)
		
		$pieceValues : ArrayList() from accumulate(
			$piece : Piece($alive : isAlive()),
			init(ArrayList<Integer> values = $nodeValues;),
			
			action(if($alive){
				if($piece.getClass() == Millitant.class){
					values.set($piece.getPlayer().getIndex(), values.get($piece.getPlayer().getIndex()) + 6);
				} else if($piece.getClass() == Necromobile.class){
					values.set($piece.getPlayer().getIndex(), values.get($piece.getPlayer().getIndex()) + 12);
				} else if($piece.getClass() == Assasin.class){
					values.set($piece.getPlayer().getIndex(), values.get($piece.getPlayer().getIndex()) + 18);
				} else if($piece.getClass() == Diplomat.class){
					values.set($piece.getPlayer().getIndex(), values.get($piece.getPlayer().getIndex()) + 12);
				} else if($piece.getClass() == Reporter.class){
					values.set($piece.getPlayer().getIndex(), values.get($piece.getPlayer().getIndex()) + 18);
				} else if($piece.getClass() == Chief.class){
					values.set($piece.getPlayer().getIndex(), values.get($piece.getPlayer().getIndex()) + 30);
				} 
			}
			),
			reverse(if($alive) values.set($piece.getPlayer().getIndex(), 0);),
			result(values;)
		)
		
		
	
	then
		System.out.println("***************");
		System.out.println($numberOfSurvivors);
		System.out.println($nodeValues);
		System.out.println($pieceValues);
		System.out.println("***************");
		

end

rule "Get Best Move For Current Player"
	agenda-group "next"
	salience 2
	when
		$newMove : MinMaxNode()
	then
		$newMove.getMove().execute();
		game.setRoot($newMove);
		game.nextPlayer();

end