

package com.sample
 
import model.*
import java.util.List;
import java.util.ArrayList;
import java.lang.Math;
global Game game;



rule "Is BoardObject In Center"
	no-loop true
    when
        $boardObject : BoardObject( x == 4, y == 4)
    then
        $boardObject.setCenter(true);
		update($boardObject);
end

rule "A Piece just got into center"
    when
        $piece : Chief( center == true)
    then
    
end


rule "Piece"
	
	when
		$chief : Piece(isDead()==false, player == game.getCurrentPlayer(), $x : x, $y : y)
	then
		$chief.getAvailableMoves().clear();
		MinMaxNode $newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x, $y+1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x+1, $y);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x-1, $y);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x, $y-1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x-1, $y-1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x+1, $y-1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x+1, $y+1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
		
		$newMove = new MinMaxNode();
		$newMove.setMove(new Move());
		$newMove.getMove().setTileFrom($x, $y);
		$newMove.getMove().setTileTo($x-1, $y+1);
		$newMove.getMove().setPiece($chief);
		$newMove.setPlayer($chief.getPlayer());
		$newMove.setParent(game.getRoot());
		game.getRoot().addChild($newMove);
		$chief.getAvailableMoves().add($newMove.getMove());
		insert($newMove);
end

rule "Move on kill"
	salience 4
	when 
		$newMove : MinMaxNode(this != game.getRoot(), getMove().movesOnKill == null, getMove().getTileTo() != null, getMove().getTileTo().getPiece() != null)
	then
		Move $newMove2 = new Move();
		$newMove2.setPiece($newMove.getMove().getTileTo().getPiece());
		$newMove2.setTileFrom($newMove.getMove().getTileTo());
		$newMove.getMove().setMovesOnKill($newMove2);
		update($newMove);
end

rule "MinMaxNode prunning"
	salience 5
	when 
		$newMove: MinMaxNode(this != game.getRoot() && (move.getTileTo() == null || (move.getTileTo().getPiece() != null 
		&& move.getTileTo().getPiece().getPlayer().equals(move.getPiece().getPlayer()))))
	then
		$newMove.getMove().getPiece().getAvailableMoves().remove($newMove.getMove()); 
		delete($newMove);
		game.getRoot().getChildren().remove($newMove);
end


rule "MinMax Expanding"
	salience 3
	when 
		$newMove: MinMaxNode(this != game.getRoot(), getMove().movesOnKill == null, $x : move.piece.x, $y : move.piece.y, $x2 : move.tileTo.x, $y2 : move.tileTo.y)
	then 
		MinMaxNode $newMove2 = new MinMaxNode();
		$newMove2.setMove(new Move());
		$newMove2.getMove().setTileFrom($x, $y);
		
		int $x3 = $x2 - $x;
		if($x3 != 0){
			$x3 = $x3 / Math.abs($x3);
		}
		
		int $y3 = $y2 - $y;
		if($y3 != 0){
			$y3 = $y3 / Math.abs($y3);
		}
		
		if($newMove.getMove().getPiece().getClass() == Millitant.class){
			if($newMove.getMove().getPiece().getX() + 2 < $x2+$x3){
				return;
			} else if($newMove.getMove().getPiece().getX() - 2 > $x2+$x3){
				return;
			} else if($newMove.getMove().getPiece().getY() + 2 < $y2+$y3){
				return;
			} else if($newMove.getMove().getPiece().getY() - 2 > $y2+$y3){
				return;
			}
		}
		
		
		$newMove2.getMove().setTileTo($x2 + $x3, $y2 + $y3);
		$newMove2.getMove().setPiece($newMove.getMove().getPiece());
		$newMove2.setPlayer($newMove.getMove().getPiece().getPlayer());
		$newMove2.setParent(game.getRoot());
		game.getRoot().addChild($newMove2);
		$newMove.getMove().getPiece().getAvailableMoves().add($newMove2.getMove());
		
		insert($newMove2);
end

rule "Heuristics"
	salience 2
	when
		$newMove: MinMaxNode(this != game.getRoot())
		$values : Boolean() from accumulate (
			MinMaxNode(this == $newMove),
			init(
			),
			action(
				$newMove.heuristic();
			),
			
			result(
				true
			)
		
		
		)
		
		
	
	then
		update(game.getRoot());

end

rule "Get Best Move"
	salience 1
	when
		$minMaxNode: MinMaxNode( this == game.getRoot(), $children : children)
	  	$bestChild : MinMaxNode() from accumulate(
	    $child: MinMaxNode( $valuesOfChild: values) from $children,        
	    init( MinMaxNode maxNode = null;
	     ),
	    
	    action( 
	    
	    
	    if(maxNode == null) maxNode = $child;
	    
	    if( $child.getValues()[$child.getPlayer().getIndex()] > maxNode.getValues()[maxNode.getPlayer().getIndex()] ){
	                maxNode = $child;
	            } ),
	    result( maxNode ) )
	then
		System.out.println($bestChild);
		for(Integer value : $bestChild.getValues()){
			System.out.println(value);
		}

end
